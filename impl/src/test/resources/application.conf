play.modules.enabled += org.pac4j.lagom.demo.impl.AuthJwtModule

# Configuration for test server
play.server.provider = "play.core.server.NettyServerProvider"

# Configuration for initializing PAC4J `JwtAuthenticator`.
# See http://www.pac4j.org/3.4.x/docs/authenticators/jwt.html for more information about JwtAuthenticator.

# Usually used only one type (signed/encrypted) of JWT and one algorithm.
# All you need is take a JWK from your Identity Provider.
# This example just demonstrates that you can use any approach for your case.
# For test JWKs genereted by `JWTTestDataGenerator`
pac4j.lagom.jwt.authenticator {
  signatures = [
    {
      algorithm = "HS256"
      jwk = {"kty":"oct","k":"ToiXiaiUXK3kRI-8FEuVGeEuknSe2XzkpDCYKKGRYug","alg":"HS256"}
    },
    {
      algorithm = "RS256"
      jwk =  {"kty":"RSA","e":"AQAB","n":"jfBRESlesM0Xma7Aix4LVyOXePzailzMv1n_bMh5bASEAFLvn-9HYAocg4Ns-P2QW8ruV_JQje9cedqgQw6INORrfd7_N9ihIo-TEWHJe7M2x0NvMdphiM1RRVLI0zguYjZfUJTI0npJ_wGdDDQS-IDbs4eNQ923O5UL9iNc4GBttjoZMtyKr8Rt__vImbXEQMWePjKSwx3tkRajuyzUk23Armr4daJMzr8GVNnSrNZAu0LQYxMrGM1dCWPXjSEsqxetGRe-siHdtutwFiBDgiflOHidRQ9kGCN11O5_tBXSO7N_5aSBL-eKIBXF2OUbseebuV2yoxMw91xMEa1qTw"}
    },
    {
      algorithm = "ES256"
      jwk =  {"kty":"EC","crv":"P-256","x":"aEBIA3MC47q2205FSUUXdjGPx9MFYeGq3zJiexYp8yI","y":"WdCRR2ZDKIhfvo4NM-j7O8G54eXstiaK7jU7R3vIeAA"}
    }
  ]
  encryptions = [
    {
      method = "A256GCM"
      algorithm = "dir"
      jwk =  {"kty":"oct","k":"ToiXiaiUXK3kRI-8FEuVGeEuknSe2XzkpDCYKKGRYug","alg":"HS256"}
    },
    {
      method = "A128GCM"
      algorithm = "RSA-OAEP-256"
      jwk =  {"p":"3WMdzhWHvwS7IKIPPkxM_nc0mvpKp1r9Q6UOGrQKChLqLHPxu9DsLengdi2AEozwi1-xfFlzSNtU9WPJ2E4rZjTNLZ2BDdbXu9-96Xjmc7gYl83nKcnALzg6ofdy3NJtryKNGB8z5ct_1okv8eTe1tV5q7rjrkRNR9KSUNrIlo8","kty":"RSA","q":"pCFTe-pryqoH3jBfspqbSCSdYsxP-6I1jXKh_UF-ueD1MZ3hzvkeuGR4fSnn5C-JdnC5OLRP01BWBWrCSOsJjtjzfrFx-RDFBns1j7ws3uOqniuYR9R_oPvKN0RRQEQmBlihUjKicec2iBu17RP-Jigeu6j2KUxAM71ecZxl0EE","d":"B-TuzVKMtq6hemWyxcoE_XK4UP1XNkzVAmuB_k3kGvLhWJdERpPrV1cYoOPlYq_PoJtXyEJs4ogGj6xuL2yWfMKbi-OkNDnzNFXh6xySNTQRfuGsRIyN0isBMybYjo7YXZQClxu_U52DkhBH6M7Yo0OfdIu8eqLRNxoiES2EU-JTpq0xgPZenOy0f0cPFB3DuDHood4scsiRy9q9OV_XoNgteeIeMmX4SHnk4n27qtGmmi8szgDm459-8SDgPiisKy8UlymVo0jl7aaL75Zlq5q7-HepStzOr-hX81jdJT-AU-DTA2Z6_kCG15IheCJbetHQ6lSsEYqoPTlI7PPVgQ","e":"AQAB","qi":"l-Bl-K6uW37sk-G0czBrlhumzkXLyo-Cy5j6rNFok6O6WYOhU8uRen52wEdjwF2jIETPHbTh-hE24drTmEXiecZL-KG7eTqjDWySWhXclr2r2Sn2ADcXslahoXOZ4wR6NJxTUCytSDVQE7q5ZeHSmGDZIV_6xtnOPWqkXCDTOiA","dp":"VwrMQiWW7JSImkj9Y0oOj5IAvdoglfIhV4JCrF8S_2j2Zyni5iw7X8XveadkDmcZgELMfo6Q1BlgKubkCkaZq6Kg9QlTH0TUJ0rN2UiumtrL2IudEoH_LNGXw-yNXaLiexRDkzNZbUT4azoe_qU0tBTUtJ9TO0YheFajLmUGrqM","dq":"mQIYeeTIKF7qhtBB5pcLO-4mavxddBB8LCk5qodsRIzbCC5PXEwRv4SqbsSqUaefVrMveRVfdXfnOZWVGbVDa9AE748s2SwxASHLhPvAOOm1HU8233_Sm5kfovYlaOwfJrtpaN-bYORTif-LUkDZJWkxfXC-SzGyiIl5iiBrKgE","n":"jfBRESlesM0Xma7Aix4LVyOXePzailzMv1n_bMh5bASEAFLvn-9HYAocg4Ns-P2QW8ruV_JQje9cedqgQw6INORrfd7_N9ihIo-TEWHJe7M2x0NvMdphiM1RRVLI0zguYjZfUJTI0npJ_wGdDDQS-IDbs4eNQ923O5UL9iNc4GBttjoZMtyKr8Rt__vImbXEQMWePjKSwx3tkRajuyzUk23Armr4daJMzr8GVNnSrNZAu0LQYxMrGM1dCWPXjSEsqxetGRe-siHdtutwFiBDgiflOHidRQ9kGCN11O5_tBXSO7N_5aSBL-eKIBXF2OUbseebuV2yoxMw91xMEa1qTw"}
    },
    {
      method = "A256GCM"
      algorithm = "ECDH-ES+A256KW"
      jwk =  {"kty":"EC","d":"xyx9a1aPQzb43gKOcQqxcfke20oW3wpGfeWcg9njVdg","crv":"P-256","x":"aEBIA3MC47q2205FSUUXdjGPx9MFYeGq3zJiexYp8yI","y":"WdCRR2ZDKIhfvo4NM-j7O8G54eXstiaK7jU7R3vIeAA"}
    }
  ]
}
